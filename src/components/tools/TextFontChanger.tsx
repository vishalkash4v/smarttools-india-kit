
import React, { useState, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, RefreshCw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface FontStyle {
  name: string;
  description: string;
  transform: (text: string) => string;
  category: string;
}

const TextFontChanger = () => {
  const [inputText, setInputText] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const { toast } = useToast();

  const fontStyles: FontStyle[] = [
    // Unicode Styles
    {
      name: 'Bold',
      description: 'Mathematical Bold',
      category: 'Unicode',
      transform: (text) => text.replace(/[A-Za-z0-9]/g, (char) => {
        const boldMap: { [key: string]: string } = {
          'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
          'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
          'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
          'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
          'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
          'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
          '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó'
        };
        return boldMap[char] || char;
      })
    },
    {
      name: 'Italic',
      description: 'Mathematical Italic',
      category: 'Unicode',
      transform: (text) => text.replace(/[A-Za-z]/g, (char) => {
        const italicMap: { [key: string]: string } = {
          'A': 'ùê¥', 'B': 'ùêµ', 'C': 'ùê∂', 'D': 'ùê∑', 'E': 'ùê∏', 'F': 'ùêπ', 'G': 'ùê∫', 'H': 'ùêª', 'I': 'ùêº', 'J': 'ùêΩ',
          'K': 'ùêæ', 'L': 'ùêø', 'M': 'ùëÄ', 'N': 'ùëÅ', 'O': 'ùëÇ', 'P': 'ùëÉ', 'Q': 'ùëÑ', 'R': 'ùëÖ', 'S': 'ùëÜ', 'T': 'ùëá',
          'U': 'ùëà', 'V': 'ùëâ', 'W': 'ùëä', 'X': 'ùëã', 'Y': 'ùëå', 'Z': 'ùëç',
          'a': 'ùëé', 'b': 'ùëè', 'c': 'ùëê', 'd': 'ùëë', 'e': 'ùëí', 'f': 'ùëì', 'g': 'ùëî', 'h': '‚Ñé', 'i': 'ùëñ', 'j': 'ùëó',
          'k': 'ùëò', 'l': 'ùëô', 'm': 'ùëö', 'n': 'ùëõ', 'o': 'ùëú', 'p': 'ùëù', 'q': 'ùëû', 'r': 'ùëü', 's': 'ùë†', 't': 'ùë°',
          'u': 'ùë¢', 'v': 'ùë£', 'w': 'ùë§', 'x': 'ùë•', 'y': 'ùë¶', 'z': 'ùëß'
        };
        return italicMap[char] || char;
      })
    },
    {
      name: 'Double Struck',
      description: 'Mathematical Double-Struck',
      category: 'Unicode',
      transform: (text) => text.replace(/[A-Za-z0-9]/g, (char) => {
        const doubleMap: { [key: string]: string } = {
          'A': 'ùî∏', 'B': 'ùîπ', 'C': '‚ÑÇ', 'D': 'ùîª', 'E': 'ùîº', 'F': 'ùîΩ', 'G': 'ùîæ', 'H': '‚Ñç', 'I': 'ùïÄ', 'J': 'ùïÅ',
          'K': 'ùïÇ', 'L': 'ùïÉ', 'M': 'ùïÑ', 'N': '‚Ñï', 'O': 'ùïÜ', 'P': '‚Ñô', 'Q': '‚Ñö', 'R': '‚Ñù', 'S': 'ùïä', 'T': 'ùïã',
          'U': 'ùïå', 'V': 'ùïç', 'W': 'ùïé', 'X': 'ùïè', 'Y': 'ùïê', 'Z': '‚Ñ§',
          'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ', 'f': 'ùïó', 'g': 'ùïò', 'h': 'ùïô', 'i': 'ùïö', 'j': 'ùïõ',
          'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü', 'o': 'ùï†', 'p': 'ùï°', 'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•',
          'u': 'ùï¶', 'v': 'ùïß', 'w': 'ùï®', 'x': 'ùï©', 'y': 'ùï™', 'z': 'ùï´',
          '0': 'ùüò', '1': 'ùüô', '2': 'ùüö', '3': 'ùüõ', '4': 'ùüú', '5': 'ùüù', '6': 'ùüû', '7': 'ùüü', '8': 'ùü†', '9': 'ùü°'
        };
        return doubleMap[char] || char;
      })
    },
    {
      name: 'Monospace',
      description: 'Fixed-width Font',
      category: 'Unicode',
      transform: (text) => text.replace(/[A-Za-z0-9]/g, (char) => {
        const monoMap: { [key: string]: string } = {
          'A': 'ùô∞', 'B': 'ùô±', 'C': 'ùô≤', 'D': 'ùô≥', 'E': 'ùô¥', 'F': 'ùôµ', 'G': 'ùô∂', 'H': 'ùô∑', 'I': 'ùô∏', 'J': 'ùôπ',
          'K': 'ùô∫', 'L': 'ùôª', 'M': 'ùôº', 'N': 'ùôΩ', 'O': 'ùôæ', 'P': 'ùôø', 'Q': 'ùöÄ', 'R': 'ùöÅ', 'S': 'ùöÇ', 'T': 'ùöÉ',
          'U': 'ùöÑ', 'V': 'ùöÖ', 'W': 'ùöÜ', 'X': 'ùöá', 'Y': 'ùöà', 'Z': 'ùöâ',
          'a': 'ùöä', 'b': 'ùöã', 'c': 'ùöå', 'd': 'ùöç', 'e': 'ùöé', 'f': 'ùöè', 'g': 'ùöê', 'h': 'ùöë', 'i': 'ùöí', 'j': 'ùöì',
          'k': 'ùöî', 'l': 'ùöï', 'm': 'ùöñ', 'n': 'ùöó', 'o': 'ùöò', 'p': 'ùöô', 'q': 'ùöö', 'r': 'ùöõ', 's': 'ùöú', 't': 'ùöù',
          'u': 'ùöû', 'v': 'ùöü', 'w': 'ùö†', 'x': 'ùö°', 'y': 'ùö¢', 'z': 'ùö£',
          '0': 'ùü∂', '1': 'ùü∑', '2': 'ùü∏', '3': 'ùüπ', '4': 'ùü∫', '5': 'ùüª', '6': 'ùüº', '7': 'ùüΩ', '8': 'ùüæ', '9': 'ùüø'
        };
        return monoMap[char] || char;
      })
    },
    // Special Styles
    {
      name: 'Upside Down',
      description: 'Flipped Text',
      category: 'Special',
      transform: (text) => {
        const flipMap: { [key: string]: string } = {
          'a': '…ê', 'b': 'q', 'c': '…î', 'd': 'p', 'e': '«ù', 'f': '…ü', 'g': '∆É', 'h': '…•', 'i': '·¥â', 'j': '…æ',
          'k': ' û', 'l': 'l', 'm': '…Ø', 'n': 'u', 'o': 'o', 'p': 'd', 'q': 'b', 'r': '…π', 's': 's', 't': ' á',
          'u': 'n', 'v': ' å', 'w': ' ç', 'x': 'x', 'y': ' é', 'z': 'z',
          'A': '‚àÄ', 'B': '·ó∫', 'C': '∆Ü', 'D': '·ó°', 'E': '∆é', 'F': '·ñ¥', 'G': '◊§', 'H': 'H', 'I': 'I', 'J': '≈ø',
          'K': ' û', 'L': 'À•', 'M': 'W', 'N': 'N', 'O': 'O', 'P': '‘Ä', 'Q': 'Q', 'R': '·¥ø', 'S': 'S', 'T': '‚î¥',
          'U': '‚à©', 'V': 'Œõ', 'W': 'M', 'X': 'X', 'Y': '‚ÖÑ', 'Z': 'Z',
          '0': '0', '1': '∆ñ', '2': '·ÑÖ', '3': '∆ê', '4': '„Ñ£', '5': 'œõ', '6': '9', '7': '„Ñ•', '8': '8', '9': '6',
          '.': 'Àô', ',': "'", '?': '¬ø', '!': '¬°', "'": ',', '"': '‚Äû', '(': ')', ')': '(', '[': ']', ']': '[',
          '{': '}', '}': '{', '<': '>', '>': '<', '&': '‚Öã'
        };
        return text.toLowerCase().split('').map(char => flipMap[char] || char).reverse().join('');
      }
    },
    {
      name: 'Mirror Text',
      description: 'Reversed Character Order',
      category: 'Special',
      transform: (text) => text.split('').reverse().join('')
    },
    {
      name: 'Bubble Text',
      description: 'Circled Characters',
      category: 'Special',
      transform: (text) => text.replace(/[A-Za-z0-9]/g, (char) => {
        const bubbleMap: { [key: string]: string } = {
          'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ', 'I': '‚íæ', 'J': '‚íø',
          'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ', 'Q': '‚ìÜ', 'R': '‚ìá', 'S': '‚ìà', 'T': '‚ìâ',
          'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç', 'Y': '‚ìé', 'Z': '‚ìè',
          'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò', 'j': '‚ìô',
          'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°', 's': '‚ì¢', 't': '‚ì£',
          'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©',
          '0': '‚ì™', '1': '‚ë†', '2': '‚ë°', '3': '‚ë¢', '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶', '8': '‚ëß', '9': '‚ë®'
        };
        return bubbleMap[char] || char;
      })
    },
    {
      name: 'Square Text',
      description: 'Squared Characters',
      category: 'Special',
      transform: (text) => text.replace(/[A-Za-z]/g, (char) => {
        const squareMap: { [key: string]: string } = {
          'A': 'üÖ∞', 'B': 'üÖ±', 'C': 'üÖ≤', 'D': 'üÖ≥', 'E': 'üÖ¥', 'F': 'üÖµ', 'G': 'üÖ∂', 'H': 'üÖ∑', 'I': 'üÖ∏', 'J': 'üÖπ',
          'K': 'üÖ∫', 'L': 'üÖª', 'M': 'üÖº', 'N': 'üÖΩ', 'O': 'üÖæ', 'P': 'üÖø', 'Q': 'üÜÄ', 'R': 'üÜÅ', 'S': 'üÜÇ', 'T': 'üÜÉ',
          'U': 'üÜÑ', 'V': 'üÜÖ', 'W': 'üÜÜ', 'X': 'üÜá', 'Y': 'üÜà', 'Z': 'üÜâ'
        };
        return squareMap[char.toUpperCase()] || char;
      })
    },
    // Decorative Styles
    {
      name: 'Zalgo Text',
      description: 'Glitchy Combining Characters',
      category: 'Decorative',
      transform: (text) => {
        const zalgoChars = [
          '\u0300', '\u0301', '\u0302', '\u0303', '\u0304', '\u0305', '\u0306', '\u0307', '\u0308', '\u0309',
          '\u030A', '\u030B', '\u030C', '\u030D', '\u030E', '\u030F', '\u0310', '\u0311', '\u0312', '\u0313',
          '\u0314', '\u0315', '\u0316', '\u0317', '\u0318', '\u0319', '\u031A', '\u031B', '\u031C', '\u031D'
        ];
        return text.split('').map(char => {
          if (char.match(/[a-zA-Z]/)) {
            const numZalgo = Math.floor(Math.random() * 3) + 1;
            let zalgoText = char;
            for (let i = 0; i < numZalgo; i++) {
              zalgoText += zalgoChars[Math.floor(Math.random() * zalgoChars.length)];
            }
            return zalgoText;
          }
          return char;
        }).join('');
      }
    },
    {
      name: 'Strikethrough',
      description: 'Text with Line Through',
      category: 'Decorative',
      transform: (text) => text.split('').map(char => char + '\u0336').join('')
    },
    {
      name: 'Underline',
      description: 'Text with Underline',
      category: 'Decorative',
      transform: (text) => text.split('').map(char => char + '\u0332').join('')
    },
    // Text Case Styles
    {
      name: 'aLtErNaTiNg CaSe',
      description: 'Alternating Upper and Lower Case',
      category: 'Case',
      transform: (text) => text.split('').map((char, index) => 
        index % 2 === 0 ? char.toLowerCase() : char.toUpperCase()
      ).join('')
    },
    {
      name: 'InVeRsE cAsE',
      description: 'Inverse Alternating Case',
      category: 'Case',
      transform: (text) => text.split('').map((char, index) => 
        index % 2 === 1 ? char.toLowerCase() : char.toUpperCase()
      ).join('')
    },
    {
      name: 'UPPERCASE',
      description: 'All Characters Uppercase',
      category: 'Case',
      transform: (text) => text.toUpperCase()
    },
    {
      name: 'lowercase',
      description: 'All Characters Lowercase',
      category: 'Case',
      transform: (text) => text.toLowerCase()
    },
    {
      name: 'Title Case',
      description: 'First Letter of Each Word Capitalized',
      category: 'Case',
      transform: (text) => text.replace(/\w\S*/g, (txt) => 
        txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
      )
    }
  ];

  const categories = ['All', ...Array.from(new Set(fontStyles.map(style => style.category)))];

  const filteredStyles = selectedCategory === 'All' 
    ? fontStyles 
    : fontStyles.filter(style => style.category === selectedCategory);

  const copyToClipboard = useCallback(async (text: string, styleName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: `${styleName} text copied to clipboard`,
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Could not copy text to clipboard",
        variant: "destructive",
      });
    }
  }, [toast]);

  const downloadText = useCallback((text: string, styleName: string) => {
    const blob = new Blob([text], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${styleName.toLowerCase().replace(/\s+/g, '_')}_text.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Downloaded!",
      description: `${styleName} text downloaded as file`,
    });
  }, [toast]);

  const clearText = useCallback(() => {
    setInputText('');
    toast({
      title: "Cleared!",
      description: "Input text has been cleared",
    });
  }, [toast]);

  return (
    <div className="w-full max-w-6xl mx-auto space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            Text Font Changer
            <RefreshCw className="h-5 w-5" />
          </CardTitle>
          <CardDescription>
            Transform your plain text into various fancy fonts and styles. Perfect for social media, messaging, and creative writing.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="input-text" className="text-sm font-medium">
              Enter your text:
            </label>
            <Textarea
              id="input-text"
              placeholder="Type your text here..."
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              className="min-h-[100px] resize-y"
            />
            {inputText && (
              <div className="flex gap-2">
                <Button onClick={clearText} variant="outline" size="sm">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Clear
                </Button>
                <Badge variant="secondary">
                  {inputText.length} characters
                </Badge>
              </div>
            )}
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Filter by category:</label>
            <div className="flex flex-wrap gap-2">
              {categories.map((category) => (
                <Badge
                  key={category}
                  variant={selectedCategory === category ? "default" : "outline"}
                  className="cursor-pointer"
                  onClick={() => setSelectedCategory(category)}
                >
                  {category}
                </Badge>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>

      {inputText && (
        <div className="grid gap-4">
          {filteredStyles.map((style, index) => {
            const transformedText = style.transform(inputText);
            return (
              <Card key={index} className="relative">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="text-lg">{style.name}</CardTitle>
                      <CardDescription>{style.description}</CardDescription>
                    </div>
                    <Badge variant="outline">{style.category}</Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="p-4 bg-muted rounded-lg font-mono text-lg leading-relaxed break-all">
                    {transformedText}
                  </div>
                  <div className="flex gap-2">
                    <Button
                      onClick={() => copyToClipboard(transformedText, style.name)}
                      variant="outline"
                      size="sm"
                    >
                      <Copy className="h-4 w-4 mr-2" />
                      Copy
                    </Button>
                    <Button
                      onClick={() => downloadText(transformedText, style.name)}
                      variant="outline"
                      size="sm"
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {!inputText && (
        <Card>
          <CardContent className="py-8 text-center">
            <p className="text-muted-foreground">
              Enter some text above to see it transformed into various fancy fonts and styles!
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default TextFontChanger;
